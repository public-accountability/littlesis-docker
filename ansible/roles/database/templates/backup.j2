#!/usr/bin/env python3
#
# LittleSis backup script
#
# This uses rclone (https://rclone.org) to backup our database to
# these locations:
# 
#   - digital ocean spaces
#   - AWS S3
#
# rclone backends were created manually using rclone's interactive configuration tool: `rclone config`
#
# Each backend should have a folder at root level called "/backups"

import argparse
import datetime
import getpass
import os
import subprocess
import sys

if getpass.getuser() != 'root':
    sys.exit("LittleSis database backup script must be run as root")

parser = argparse.ArgumentParser(description='Backup LittleSis Database')

parser.add_argument('database',
                    choices=['littlesis', 'wordpress'],
                    default='littlesis',
                    nargs='?',
                    help='which database to backup')

parser.add_argument('--all',
                    action='store_true',
                    help='backup all tables that are not often updated')

parser.add_argument('--backup-dir',
                    default='/srv/backup',
                    help='location to save the backup')
                    
args = parser.parse_args()

today = datetime.date.today()
today_str = today.strftime('%F')

# On the first of every month backup all tables
if today.day == 1:
    args.all = True

# Set filename of the sql dump
if args.database == 'wordpress':
    filename = "wordpress-backup-{}.sql.xz".format(today_str)
elif args.database == 'littlesis':
    if all_tables:
        filename = "littlesis-backup-all-{}.sql.xz".format(today_str)
    else:
        filename = "littlesis-backup-most-{}.sql.xz".format(today_str)
else:
    sys.exit("Invalid database")

PATH = os.path.join(args.backup_dir, filename)

MYSQLDUMP = ["/usr/bin/mysqldump", "--single-transaction", "--quick", "--routines"]

if args.database == 'littlesis' and not args.all:
    MYSQLDUMP.append('--ignore-table=littlesis.os_donations')
    MYSQLDUMP.append('--ignore-table=littlesis.versions')
    MYSQLDUMP.append('--ignore-table=littlesis.ny_disclosures')
    MYSQLDUMP.append('--ignore-table=littlesis.modification_field')
    MYSQLDUMP.append('--ignore-table=littlesis.modification')
    MYSQLDUMP.append('--ignore-table=littlesis.ny_disclosures')
    MYSQLDUMP.append('--ignore-table=littlesis.api_request')

MYSQLDUMP.append(args.database)

MYSQLDUMP.extend(['|', 'xz', '>', PATH])

# Run mysqldump
# Files are saved to /srv/backup unless option '--backup-dir' is set
subprocess.run(' '.join(MYSQLDUMP), check=True, shell=True)

def rclone_command(backend, path):
    bucket_name = {
        'digitalocean': 'littlesis',
        'aws': 'pai-littlesis'
    }[backend]

    return [
        '/usr/bin/rclone',
        'copy',
        path,
        "{backend}:{bucket}/backups/{filename}".format(backend=backend,
                                                       bucket=bucket_name,
                                                       filename=os.path.basename(path))
    ]

subprocess.run(
    rclone_command('digitalocean', PATH)
)

subprocess.run(
    rclone_command('aws', PATH)
)
