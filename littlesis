#!/bin/bash
set -e

littlesis_main_root="$(dirname $(readlink -f "$0"))"
rails_repo="$littlesis_main_root/rails"
rails_env="${RAILS_ENV:-development}"
docker_tag="${LITTLESIS_DOCKER_TAG:-2.0.0}"
docker_compose="docker-compose --file=$littlesis_main_root/docker-compose.yml"
bundle_path="bundle"
delayed_job="bin/delayed_job"

case $1 in
    --test|-t)
        shift
        rails_env="test"
        ;;
    --development|-d)
        shift
        rails_env="development"
        ;;
    --production|-P)
        shift
        rails_env="production"
    ;;
esac

export RAILS_ENV=$rails_env

# set values for production

if [ "$rails_env" == "production" ]
then
    rails_repo="/var/www/littlesis"
    bundle_path="/home/littlesis/.rbenv/shims/bundle"
    delayed_job="bin/delayed_job -n 2"
fi

show_help() {
    cat << EOF
Usage: littlesis <command>

Commands
           up                start docker containers
           down              stop docker containres
           status            local status information
           docker <cmd>      run any docker docker command (i.e  docker ps)
           build             re-build docker images
           mysql             mysql database shell
           cmd <cmd>         run aribary shell commands in app docker
           bin <file>        run any bin/script by name
           script <file>     run any lib/scripts by name
           console           launch rails console
           logs <LOG>        follow log
           coverage          open simplecov report
           redis             start redis cli
           setup-clone       clones littlesis-rails
           setup-database    creates rails app mysql databases
           run-sql <file>    execute sqlite file with user & db = littlesis
           reset-test-db     drops and re-creates littlesis_test
           data              ETL utilities for external data
           fec               runs FEC data cli
           delayed_job <cmd> run delayed_job commands

The following aliases are available
           git
           rspec
           rails
           runner
           bundle
           pumactl
           yarn

Use --test, --production, --development to set RAILS_ENV
           littlesis --test rake db:migrate

EOF
}

fail() {
    echo "$1" 1>&2
    exit 1
}

short_help() {
    echo "Usage: littlesis [COMMAND]"
    echo "Helpful shortcuts to the LittleSis development environment"
    echo "More information: littlesis help"
}


clone_repo() {
    mkdir -p $rails_repo

    test -e $rails_repo/.git && return 0

    if ssh -o StrictHostKeyChecking=no -T git@github.com 2>&1 | grep -q 'successfully authenticated';then
        URL="git@github.com:public-accountability/littlesis-rails.git"
    else
        URL="https://github.com/public-accountability/littlesis-rails.git"
    fi

    git clone $URL $rails_repo
}

setup_database() {
    mysql -h 127.0.0.1 -u root -proot <<SQL
CREATE DATABASE littlesis;
grant all privileges on littlesis.* to 'root'@'%' identified by 'root';
grant all privileges on littlesis.* to 'littlesis'@'%' identified by '' with grant option;
GRANT FILE ON *.* TO 'littlesis'@'%' identified by 'themanbehindthemanbehindthethrone';
create database littlesis_test;
grant all privileges on littlesis_test.* to 'littlesis'@'%' identified by 'themanbehindthemanbehindthethrone';
flush privileges;
SQL
    mysql -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis -e '\q'
}

exec_sql_file() {
    sql_file="$1"

    if ! test -f "$sql_file"
    then
        echo "$sql_file is not a file"
        return 1
    fi

    mysql -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis < "$sql_file"
}


nginx_logs() {
    if [ "$1" == "access" ] || [ "$1" == "error" ]; then
	local log_file="/var/log/nginx/${1}.log"
	$docker_compose exec nginx /bin/sh -c "tail -f ${log_file}"
    else
	fail 'There are only two nginx logs available: access and error'
    fi
}

mysql_shell() {
    if [ -x "$(command -v mycli)" ];then
	local MYSQL=mycli
    else
	local MYSQL=mysql
    fi
    $MYSQL -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis
}

rails_coverage() {
    local cov_file=file://$rails_repo/coverage/index.html

    if [ -x "$(command -v chromium)" ];then
	chromium --new-window $cov_file > /dev/null 2>&1
    elif [ -x "$(command -v firefox)" ];then
	firefox --new-window $cov_file > /dev/null 2>&1
    else
	fail 'Could not find firefox or chromium'
    fi
}

redis_cli() {
    if [ "$rails_env" == "production" ]
    then
        /usr/bin/redis-cli
    else
        $docker_compose exec app /usr/bin/redis-cli -h redis
    fi
}

littlesis_fetch_pull_request() {
    [ -z "$1" ] && fail "please provide a pull request number"
    bash -c "cd $rails_repo && git fetch origin pull/$1/head:pull-request-$1"
}

littlesis_status() {
    if ! [ "$rails_env" == "production" ];then
        local services_running="$($docker_compose ps --services --filter "status=running" | sed '/^$/d' | wc -l)"

        if [ "$services_running" == '4' ];then
            echo "Docker containers are running :)"
        else
            echo "$services_running / 4 docker containers are running :("
        fi
    fi

    local rails_git_commit=$(cd $rails_repo && git rev-parse --short HEAD)
    local rails_git_branch=$(cd $rails_repo && git rev-parse --abbrev-ref HEAD)

    echo "On Rails commit $rails_git_commit on branch $rails_git_branch"
}

littlesis_docker_build() {
    echo "Building littlesis/ruby:$docker_tag"
    docker build -t littlesis/ruby:$docker_tag -f "$littlesis_main_root/docker/ruby.dockerfile" "$rails_repo"
    docker tag littlesis/ruby:$docker_tag littlesis/ruby:latest

    echo "Building littlesis/rails:$docker_tag"
    docker build -t littlesis/rails:$docker_tag -f "$littlesis_main_root/docker/rails.dockerfile" "$rails_repo"
    docker tag littlesis/rails:$docker_tag littlesis/rails:latest
}

set_environment_to_test() {
    if ! [ "$rails_env" == "test" ]; then
        echo "Setting RAILS_ENV to test" 1>&2
        rails_env="test"
    fi
}

app_exec_docker() {
    $docker_compose exec app /bin/sh -c "RAILS_ENV=$rails_env $*"
}

app_exec_production() {
    sudo runuser -u littlesis -- /bin/bash -c "export RAILS_ENV=production; cd $rails_repo; $*"
}

web_app_exec() {
    if [ "$rails_env" == "production" ]
    then
        app_exec_production "$@"
    else
        app_exec_docker "$@"
    fi

}

bundle_exec() {
    web_app_exec "$bundle_path exec $*"
}



case $1 in
    docker|docker_compose|docker-compose)
	shift
        $docker_compose "$@"
	;;
    up)
	$docker_compose up -d
	;;
    down)
	$docker_compose down
	;;
    build)
        littlesis_docker_build
        ;;
    pause|unpause|ps|top)
        $docker_compose "$1"
        ;;
    status)
        littlesis_status
        ;;
    pumactl)
        shift
        bundle_exec "pumactl -p tmp/puma.pid $*"
        ;;
    mysql)
	mysql_shell
	;;
    test|rspec)
	shift
        set_environment_to_test
	bundle_exec "rspec $*"
	;;
    cmd)
	shift
        web_app_exec "$@"
	;;
    yarn)
        shift
        bundle_exec "bin/yarn $*"
        ;;
    bin)
        shift
        web_app_exec "bin/$*"
        ;;
    script)
        shift
        web_app_exec "lib/scripts/$*"
        ;;
    git)
        export GIT_DIR=$rails_repo/.git
        "$@"
        ;;
    bundle)
	web_app_exec "$*"
	;;
    console|c)
        bundle_exec rails c
        ;;
    rails|rake|rspec)
        bundle_exec $*
        ;;
    runner)
        shift
        bundle_exec rails runner "$*"
        ;;
    delayed_job|dj)
        shift
        bundle_exec "$delayed_job $*"
        ;;
    logs)
        shift
        case $1 in
            rails)
                tail -f "$rails_repo/log/$rails_env.log"
                ;;
            nginx)
                if test "$2" = "error"; then
	            nginx_logs error
                else
                    nginx_logs access
                fi
	        ;;
            docker)
                $docker_compose logs --follow
                ;;
            *)
                fail "invalid log: $1. options: rails, nginx, docker"
                ;;
        esac
        ;;
    reset-test-db)
        set_environment_to_test
	bundle_exec 'rake db:reset'
	;;
    data)
        shift
        bundle_exec rails runner lib/scripts/data.rb "$@"
        ;;
    search|rg)
	shift
	cd rails && rg "$*"
	;;
    cov|coverage)
	rails_coverage
	;;
    redis)
        redis_cli
	 ;;
    fec)
        shift
        bundle_exec rails runner lib/scripts/fec "$@"
        ;;
    pull-request)
        shift
        littlesis_fetch_pull_request "$1"
        exit
        ;;
    setup-clone)
        clone_repo
        ;;
    setup-database)
        setup_database
        ;;
    run-sql)
        shift
        exec_sql_file "$1"
        ;;
    -h|help|--help)
	show_help
	;;
    ?*) # End of all options.
        fail "Invalid option"
	;;
    *)
	short_help
	;;
esac
