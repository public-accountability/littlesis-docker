#!/bin/bash
# Helpful shortcuts to the LittleSis development environment
#
# This will only work correctly if the working directory
# is set to the root of the littlesis-main repo. To use from anywhere
# create a wrapping script and place it on your path.
#    #!/bin/sh
#    cd /path/to/this/repo || exit 1
#    ./littlesis $@
#
set -e

rails_env="${RAILS_ENV:-development}"
DOCKER_TAG=2.0.0

show_help() {
    cat << EOF
Usage: littlesis <command>

Commands
           up              start docker containers
           down            stop docker containres
           status          local status information
           docker <cmd>    run any docker docker command (i.e  docker ps)
           build           re-build docker images
           mysql           mysql database shell
           cmd <cmd>       run aribary shell commands in app docker
           bin <file>      run any bin/script by name
           script <file>   run any lib/scripts by name
           console         launch rails console
           logs <LOG>      follow log
           coverage        open simplecov report
           redis           start redis cli
           setup-clone     clones littlesis-rails
           setup-database  creates rails app mysql databases
           run-sql <file>  execute sqlite file with user & db = littlesis
           reset-test-db   drops and re-creates littlesis_test
           data            ETL utilities for external data
           fec             runs FEC data cli

The following aliases are available
           git
           rspec
           rails
           runner
           bundle
           pumactl
           yarn

Use --test, --production, --development to set RAILS_ENV
           littlesis --test rake db:migrate

EOF
}

fail() {
    echo "$1" 1>&2
    exit 1
}

short_help() {
    echo "Usage: littlesis [COMMAND]"
    echo "Helpful shortcuts to the LittleSis development environment"
    echo "More information: littlesis help"
}


clone_repo() {
    mkdir -p rails

    test -e rails/.git && return 0

    if ssh -o StrictHostKeyChecking=no -T git@github.com 2>&1 | grep -q 'successfully authenticated';then
        URL="git@github.com:public-accountability/littlesis-rails.git"
    else
        URL="https://github.com/public-accountability/littlesis-rails.git"
    fi

    git clone $URL ./rails
}

setup_database() {
    mysql -h 127.0.0.1 -u root -proot <<SQL
create database littlesis;
grant all privileges on littlesis.* to 'root'@'%' identified by 'root';
grant all privileges on littlesis.* to 'littlesis'@'%' identified by '' with grant option;
GRANT FILE ON *.* TO 'littlesis'@'%' identified by 'themanbehindthemanbehindthethrone';
create database littlesis_test;
grant all privileges on littlesis_test.* to 'littlesis'@'%' identified by 'themanbehindthemanbehindthethrone';
flush privileges;
SQL

    mysql -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis -e '\q'
}

exec_sql_file() {
    sql_file="$1"

    if ! test -f "$sql_file"
    then
        echo "$sql_file is not a file"
        return 1
    fi

    mysql -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis < "$sql_file"
}


nginx_logs() {
    if [[ "$1" == access || "$1" == error ]]; then
	local log_file="/var/log/nginx/${1}.log"
	docker-compose exec nginx /bin/bash -c "tail -f ${log_file}"
    else
	fail 'There are only two nginx logs available: access and error'
    fi
}

mysql_shell() {
    if [ -x "$(command -v mycli)" ];then
	local MYSQL=mycli
    else
	local MYSQL=mysql
    fi
    $MYSQL -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis
}

rails_coverage() {
    local cov_file=file://$(pwd)/rails/coverage/index.html

    if [ -x "$(command -v chromium)" ];then
	chromium --new-window $cov_file > /dev/null 2>&1
    elif [ -x "$(command -v firefox)" ];then
	firefox --new-window $cov_file > /dev/null 2>&1
    else
	fail 'Could not find firefox or chromium'
    fi
}

littlesis_fetch_pull_request() {
    [ -z "$1" ] && fail "please provide a pull request number"
    cd rails && git fetch origin pull/$1/head:pull-request-$1
}

littlesis_status() {
    if [[ "$(docker-compose ps --services --filter "status=running" | wc -l)" = '4' ]]
    then
        echo "Docker containers are running :)"
    else
        echo "One more docker containers are not running :("
    fi

    local rails_git_commit=$(cd rails && git rev-parse --short HEAD)
    local rails_git_branch=$(cd rails && git rev-parse --abbrev-ref HEAD)

    echo "On Rails commit $rails_git_commit on branch $rails_git_branch"
}

littlesis_docker_build() {
    echo "Building littlesis/ruby:$DOCKER_TAG"
    docker build -t littlesis/ruby:$DOCKER_TAG - < ./docker/ruby.dockerfile
    docker tag littlesis/ruby:$DOCKER_TAG littlesis/ruby:latest

    echo "Building littlesis/rails:$DOCKER_TAG"
    docker build -t littlesis/rails:$DOCKER_TAG -f ./docker/rails.dockerfile ./rails
    docker tag littlesis/rails:$DOCKER_TAG littlesis/rails:latest
}

set_environment_to_test() {
    if ! [ "$rails_env" == "test" ]; then
        echo "Setting RAILS_ENV to test" 1>&2
        rails_env="test"
    fi
}

web_app_exec() {
    docker-compose exec app /bin/sh -c "RAILS_ENV=$rails_env $*"
}

bundle_exec() {
    web_app_exec "bundle exec $*"
}


case $1 in
    --test|-t)
        shift
        rails_env="test"
        ;;
    --development|-d)
        shift
        rails_env="development"
        ;;
    --production|-P)
        shift
        rails_env="production"
    ;;
esac


case $1 in
    docker|docker-compose)
	shift
        docker-compose "$*"
	;;
    up)
	docker-compose up -d
	;;
    down)
	docker-compose down
	;;
    build)
        littlesis_docker_build
        ;;
    pause|unpause|ps|top)
        docker-compose "$1"
        ;;
    status)
        littlesis_status
        ;;
    pumactl)
        shift
        bundle_exec "pumactl -p tmp/puma.pid $*"
        ;;
    mysql)
	mysql_shell
	;;
    test|rspec)
	shift
        set_environment_to_test
	bundle_exec "rspec $*"
	;;
    cmd)
	shift
	;;
    yarn)
        shift
        bundle_exec "bin/yarn $*"
        ;;
    bin)
        shift
        bundle_exec "bin/$*"
        ;;
    script)
        shift
        web_app_exec "lib/scripts/$*"
        ;;
    git)
        cd rails
        "$@"
        ;;
    bundle)
	web_app_exec "$*"
	;;
    console|c)
        bundle_exec rails c
        ;;
    rails|rake|rspec)
        bundle_exec $*
        ;;
    runner)
        shift
        bundle_exec rails runner "$*"
        ;;
    logs)
        shift
        case $1 in
            development)
                tail -f rails/log/development.log
                ;;
            test)
                tail -f rails/log/test.log
                ;;
            nginx)
                if test -z "$2"; then
	            nginx_logs access
                else
                    nginx_logs "$2"
                fi
	        ;;
            docker)
                docker-compose logs --follow
                ;;
            *)
                fail "invalid log: $1"
                exit
                ;;
        esac
        ;;
    reset-test-db)
        set_environment_to_test
	bundle_exec 'rake db:reset'
	;;
    data)
        shift
        bundle_exec rails runner lib/scripts/data.rb "$@"
        ;;
    search|rg)
	shift
	cd rails && rg "$*"
	;;
    cov|coverage)
	rails_coverage
	;;
    redis)
	 docker-compose exec app /usr/bin/redis-cli -h redis
	 ;;
    fec)
        shift
        bundle_exec rails runner lib/scripts/fec "$@"
        ;;
    pull-request)
        shift
        littlesis_fetch_pull_request "$1"
        exit
        ;;
    setup-clone)
        clone_repo
        ;;
    setup-database)
        setup_database
        ;;
    run-sql)
        shift
        exec_sql_file "$1"
        ;;
    -h|help|--help)
	show_help
	;;
    ?*) # End of all options.
        fail "Invalid option"
	;;
    *)
	short_help
	;;
esac
