#!/bin/bash

show_help() {
    cat << EOF
Usage: ./littlesis <command>
Helpful shortcuts to the LittleSis development environment

Start/pause/stop app:
littlesis up/down/pause/unpause

littlesis status

littlesis docker [any-docker-compose-command]

Rails console: littlesis c

Mysql shell: littlesis mysql

Information: littlesis ps, littlesis logs

Login to the app container: littlesis login

Testing:
Run tests: littlesis test
Run a single test: littlesis test path/to/specfile
Open bash console in test environment: littlesis spec
Reset the test database: littlesis reset-test-db

Commands:
Run a command: littlesis cmd [...]
Run a command in the test environment: littlesis cmd-test [...]
Run a rake command: littlesis rake [...]
Run a rake command in the test environment: littlesis rake-test [...]
Rails runner: littlesis runner [...]

Logging:
Rails logs: littlesis rails-logs
Rails test logs: littlesis rails-test-logs
Nginx logs: littlesis nginx access|error

Restart rails: littlesis restart-rails

Search rails app: littlesis search <TERM>

View rails coverage: littlesis coverage

redis cli: littlesis redis

download latest build log from travis: littlesis travis-log

EOF
}

web_app_exec="docker-compose exec app /bin/bash -l -c"

short_help() {
    echo "Usage: ./littlesis [COMMAND]"
    echo "Helpful shortcuts to the LittleSis development environment"
    echo "More information: littlesis help"
}

nginx_logs() {
    if [[ "$1" == access || "$1" == error ]]; then
	local log_file="/var/log/nginx/${1}.log"
	docker-compose exec nginx /bin/bash -c "tail -f ${log_file}"
    else
	echo 'There are only two nginx logs available: access and error'
	exit 1
    fi
}

mysql_shell() {
    if [ -x "$(command -v mycli)" ];then
	local MYSQL=mycli
    else
	local MYSQL=mysql
    fi
    $MYSQL -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis
}

rails_coverage() {
    local cov_file=file://$(pwd)/rails/coverage/index.html

    if [ -x "$(command -v chromium)" ];then
	chromium --new-window $cov_file > /dev/null 2>&1
    elif [ -x "$(command -v firefox)" ];then
	firefox --new-window $cov_file > /dev/null 2>&1
    else
	echo 'Could not find firefox or chromium'
	exit 1
    fi
}

travis_curl() {
    if [ -f ./.travis_api_token ]
    then
        travis_api_token=$(cat ./.travis_api_token)
    else
        echo "Missing file '.travis_api_token'" 1>&2
        exit 1
    fi

    curl -s -S -L -H "Travis-API-Version: 3" -H "Authorization: token $travis_api_token" "https://api.travis-ci.org/$1"
}

travis_build_log() {
    local travis_repo_id=12307754
    latest_build_id=$(travis_curl "repo/$travis_repo_id/builds?limit=1" | jq '.builds[0].id')
    latest_job_id=$(travis_curl "build/$latest_build_id" | jq '.jobs[0].id')
    travis_curl "job/$latest_job_id/log.txt" > "littlesis-travis-log-$latest_job_id.txt"
    echo "log saved to: $(readlink -f littlesis-travis-log-$latest_job_id.txt)"
}

littlesis_status() {
    if [[ "$(docker-compose ps --services --filter "status=running" | wc -l)" = '4' ]]
    then
        echo "Docker containers are running"
    else
        echo "One more docker containers are not running"
    fi

    local rails_git_commit=$(cd rails && git rev-parse --short HEAD)
    local rails_git_branch=$(cd rails && git rev-parse --abbrev-ref HEAD)

    echo "On Rails commit $rails_git_commit on branch $rails_git_branch"

    # TODO check littlesis docker version
}

case $1 in
    docker|docker-compose)
	shift
	docker-compose "$@"
	;;
    up)
	docker-compose up -d
	;;
    down)
	docker-compose down
	;;
    pause|unpause|ps|top)
        docker-compose "$1"
        ;;
    status)
        littlesis_status
        ;;
    logs)
	shift
	docker-compose logs $@
	;;
    nginx)
	shift
        if test -z "$1"; then
	    nginx_logs access
        else
            nginx_logs "$1"
        fi
	;;
    mysql)
	mysql_shell
	;;
    login)
	docker-compose exec app /bin/bash --login
	;;
    test)
	shift
	$web_app_exec "RAILS_ENV=test bundle exec rspec ${@}"
	;;
    spec)
	$web_app_exec "RAILS_ENV=test /bin/bash --login"
	;;
    cmd)
	shift
	$web_app_exec "${@}"
	;;
    cmd-test)
	shift
	$web_app_exec "RAILS_ENV=test ${@}"
	;;
    runner)
	shift
	$web_app_exec "RAILS_ENV=development bin/rails runner '${@}'"
	;;
    console|c)
	$web_app_exec 'RAILS_ENV=development bin/rails c'
	;;
    rails-logs)
	tail -f rails/log/development.log | grep -v '/assets/'
	;;
    rails-test-logs)
	tail -f rails/log/test.log
	;;
    rake)
	shift
	$web_app_exec "RAILS_ENV=development bundle exec rake ${@}"
	;;
    rake-test)
	shift
	$web_app_exec "RAILS_ENV=test bundle exec rake ${@}"
	;;
    restart-rails)
	$web_app_exec "bundle exec pumactl -p tmp/puma.pid restart"
	;;
    reset-test-db)
	$web_app_exec 'RAILS_ENV=test bundle exec rake db:reset'
	;;
    search|rg)
	shift
	cd rails && rg "$@"
	;;
    cov|coverage)
	rails_coverage
	;;
    redis)
	 docker-compose exec app /usr/bin/redis-cli -h redis
	;;
    travis-log)
	travis_build_log
        ;;
    -h|help|--help)
	show_help
	;;
    ?*) # End of all options.
	echo 'Invalid option'
        echo 'all options: up, down, ps, logs, nginx, mysql, login, test, rspec, spec, cmd, console, rails-logs, rake, restart-rails, reset-test-db, search, spec-search, cov, help'
        exit 1
	;;
    *)
	short_help
	;;
esac
