#!/bin/bash

show_help() {
    cat << EOF
Usage: ./littlesis <command>
Helpful shortcuts to the LittleSis development environment

Start app:
littlesis up or littlesis up -d

Stop app:
littlesis down

Enter mysql shell: 
littlesis mysql

Information:
littlesis ps
littlesis logs

Login to the containers:
littlesis login

Run all rails tests:
littlesis rspec

or run one test file. example:
littlesis rspec spec/models/relationship_spec.rb

Open bash console for easy test running:
littlesis spec

Reset the test database (littlesis_test)
littlesis reset-test-db

Run rspec w/ spring
littlesis spring-spec

Start javascript tests:
littlesis jasmine

Rails console: littlesis c

Rails logs: littlesis rails-logs

Nginx logs: littlesis nginx access|error

Restart rails: littlesis restart-rails

Execute arbitrary rake command: littlesis rake [...]

For instance, to restart sphinx: littlesis rake ts:restart

Search rails app:
littlesis search <TERM>

Search test files:
littlesis spec-search <TERM>

View rails coverage:
littlesis coverage

start/stop remote dev server:
littlesis remote up
littlesis remote down

bash shell with dev env set:
littlesis bash

download latest build log from travis:
littlesis travis-log

(store travis api token in file ./.travis_api_token)

EOF
}

# web_app_exec="docker-compose exec web su app -l -c"
web_app_exec="docker-compose exec -u app web /bin/bash -l -c"

short_help() {
    echo "Usage: ./littlesis rails|php"
    echo "Helpful shortcuts to the LittleSis development environment"
    echo "More information: littlesis help"
}

nginx_logs() {
    if [[ "$1" == access || "$1" == error ]]; then
	local log_file="/var/log/nginx/${1}.log"
	docker-compose exec web /bin/bash -c "tail -f ${log_file}"
    else
	echo 'There are only two nginx logs available: access and error'
	exit 1
    fi
}

rails_search() {
    local grep_opts='-H --color -i -n'
    cd rails
    grep $grep_opts -r 'app' -e "${1}"
    grep $grep_opts -r 'lib' -e "${1}"
    grep $grep_opts -r 'config' -e "${1}"
    grep $grep_opts -r 'Gemfile' -e "${1}"
    #grep $grep_opts -r 'config' -e "${1}"
}

rails_spec_search() {
    cd rails/spec
    grep $grep_opts -r -H --color -i -n "${1}"
}

mysql_shell() {
    if [ -x "$(command -v mycli)" ];then
	local MYSQL=mycli
    else
	local MYSQL=mysql
    fi
    $MYSQL -u littlesis -pthemanbehindthemanbehindthethrone -h 127.0.0.1 littlesis
}


rails_coverage() {
    local cov_file=rails/coverage/index.html
    
    if [ -x "$(command -v chromium)" ];then
	chromium --new-window $cov_file > /dev/null 2>&1
    elif [ -x "$(command -v firefox)" ];then
	firefox --new-window $cov_file > /dev/null 2>&1
    else
	echo 'Could not find firefox or chromium'
	exit 1
    fi
}

remote() {
    case $1 in
	up)
	    ssh -4 -T -L 8080:localhost:8080 -L 8888:localhost:8888 -L 3306:localhost:3306 littlesis-dev > /dev/null 2>&1
	    ;;
	down)
	    pgrep -f 'ssh.*littlesis-dev' | xargs -I PID kill PID
	    ;;
	edit)
	    ssh littlesis-dev emacsclient -c
	    ;;
	*)
	    echo "invalid option"
	    exit 1
	    ;;
    esac
}

travis_api_token=$(cat ./.travis_api_token)
travis_repo_id=12307754

travis_curl() {
    curl -s -S -L -H "Travis-API-Version: 3" -H "Authorization: token $travis_api_token" "https://api.travis-ci.org/$1"
}

travis_build_log() {
    latest_build_id=$(travis_curl "repo/$travis_repo_id/builds?limit=1" | jq '.builds[0].id')
    latest_job_id=$(travis_curl "build/$latest_build_id" | jq '.jobs[0].id')
    travis_curl "job/$latest_job_id/log.txt" > "littlesis-travis-log-$latest_job_id.txt"
    echo "log saved to: $(readlink -f littlesis-travis-log-$latest_job_id.txt)"
}


case $1 in
    up)
	docker-compose up -d
	exit
	;;
    down|ps|logs)
	docker-compose "$1"
	exit
	;;
    nginx)
	shift
	nginx_logs "$@"
	exit
	;;
    mysql)
	mysql_shell
	exit
	;;
    login)
	docker-compose exec -u app web /bin/bash --login
	exit
	;;
    login-root)
	docker-compose exec web /bin/bash --login
	exit
	;;
    rspec)
	shift
	$web_app_exec "RAILS_ENV=test CODACY_RUN_LOCAL=true COVERAGE=true bundle exec rspec ${@}"
	exit
	;;
    spring-rspec|spring-spec|s)
	shift
	$web_app_exec "RAILS_ENV=test bin/spring rspec ${@}"
	exit
	;;
    spec)
	docker-compose exec -u app web /bin/bash --login
	exit
	;;
    cmd)
	shift
	$web_app_exec "${@}"
	exit
	;;
    console|c)
	$web_app_exec 'RAILS_ENV=development bin/rails c'
	exit
	;;
    rails-logs)
	tail -f rails/log/development.log | grep -v '/assets/'
	exit
	;;
    rake)
	shift
	$web_app_exec "RAILS_ENV=development bundle exec rake ${@}"
	exit
	;;
    restart-rails)
	docker-compose exec web /bin/bash -c 'passenger-config restart-app /home/app'
	exit
	;;
    jasmine)
	$web_app_exec "RAILS_ENV=test JASMINE=true bundle exec rake jasmine"
	exit
	;;
    reset-test-db)
	$web_app_exec 'RAILS_ENV=test bundle exec rake db:reset'
	exit
	;;
    search)
	shift
	rails_search "$@"
	exit
	;;
    spec-search)
	shift
	rails_spec_search "$@"
	exit
	;;
    cov|coverage)
	rails_coverage
	exit
	;;
    remote)
	shift
	remote "$@"
	;;
    redis)
	docker-compose exec -u app web /usr/bin/redis-cli -h redis
	;;
    bash)
	export RAILS_ENV=development
	cd rails && bash --login
	exit
	;;
    travis-log)
	travis_build_log
	;;
    -h|help|--help)
	show_help
	exit
	;;
    ?*) # End of all options.
	echo 'Invalid option'
        echo 'all options: rspec, up, down, ps, logs, nginx, mysql, login, rspec, spring-rspec, spec, cmd, console, rails-logs, rake, restart-rails, jasmine, reset-test-db, search, spec-search, cov, help'
        exit 1
	;;
    *)
	short_help
	exit
	;;
esac
